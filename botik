import telebot
from telebot import types
import pandas as pd
import random
#from sqlalchemy import create_engine
### —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = telebot.TeleBot('7467845294:AAGZzeek0ueWM9w5cUT65Jrf9tRo1UXu_ac')
name = '';
surname = '';
exp=''
salary=''
typejob=''
city=''
age = '';

###

# –ü—É—Ç—å –∫ .xls —Ñ–∞–π–ª—É
xls_file = "vac.xls"

# –ß—Ç–µ–Ω–∏–µ .xls —Ñ–∞–π–ª–∞
try:
    df = pd.read_excel(xls_file, engine="xlrd")  # –ó–∞–º–µ–Ω–∏—Ç–µ engine="openpyxl" –¥–ª—è .xlsx —Ñ–∞–π–ª–æ–≤
    print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω. –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
    print(df.head())
except Exception as e:
    print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞:", e)
    exit()
## —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ (–Ω–∞–≤—ã–∫–∏) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–∑—ã—Ä—å–∫–∞
def f(df):
    b=[[j.split(',') for j in i.split(';')] for i in df['–ù–∞–≤—ã–∫–∏'].to_list()]

    c=[]
    for i in b:
        for j in i:
            c.append(j)
    z=[]
    for i in c:
        for j in i:
            if len(j)>1:
                if j[0]==' ' or j[0]=='(':
                    z.append(j[1:])
                else:
                    z.append(j)

    mama=[(i+' '+str(z.count(i))) for i in z if z.count(i)>=2]
    papa=list(set(mama))
    a=papa
    for i in range(len(papa)-1):
        for j in range(len(papa)-1-i):
            if int((a[j])[-2:]) > int((a[j+1])[-2:]):
                a[j], a[j+1] = a[j+1], a[j]
    re = ''
    for i in range(2,20):
        re+=(a[-i])[:-2]+' '
    return re


###

@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫!", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è' or message.text=='/again':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ')
        btn2 = types.KeyboardButton('–ß–µ–º—É —É—á–∏—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ò–ë?')
        btn3 = types.KeyboardButton('–û—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã')
        btn4 = types.KeyboardButton('–ö–≤–∏–∑ –Ω–∞ —Ç–µ–º—É –ò–ë')
       # btn5 = types.KeyboardButton('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –ø—Ä–æ IT')
        markup.add(btn1, btn2, btn3,btn4)
        bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} ')
        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞


    elif message.text == '–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ' or message.text == '/reg':    
        check(message)
    elif message.text == '–ß–µ–º—É —É—á–∏—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ò–ë?':
        learn(message)
    elif message.text == '–û—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã':
        #bot.send_message(message.from_user.id, '–ü–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–æ —Å–æ–≤–µ—Ç—ã –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://habr.com/ru/docs/companies/design/)', parse_mode='Markdown')
        chance(message)
    elif message.text == '–ö–≤–∏–∑ –Ω–∞ —Ç–µ–º—É –ò–ë':
        start_quiz(message)
    elif message.text not in ['–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ','–ö–≤–∏–∑ –Ω–∞ —Ç–µ–º—É –ò–ë','–û—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã','–ß–µ–º—É —É—á–∏—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ò–ë?','/reg']:
        z=random.randint(0,1)
        if z==1:
            z='–Ø –¥—É–º–∞—é, –¥–∞'
        else:
            z ='–Ø –¥—É–º–∞—é, –Ω–µ—Ç'
        bot.send_message(message.from_user.id, z)

# –†–µ–∑—é–º–µ
def check(message):
    bot.send_message(message.chat.id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã.")
    bot.send_message(message.chat.id, "–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")
    bot.register_next_step_handler(message, get_name)
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
        if call.data == "yes": #call.data —ç—Ç–æ callback_data, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
            bot.send_message(call.message.chat.id, '–ó–∞–ø–æ–º–Ω—é : ) /again')
        elif call.data == "no":
             bot.send_message(call.message.chat.id, "–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞. –ù–∞–ø–∏—à–∏—Ç–µ /reg, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.") #–ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º
        elif call.data == 'nop':
             bot.send_message(call.message.chat.id, "–¢–µ–±–µ —Å—Ç–æ–∏—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –Ω–∞–∂–º–∏ /reg")
        elif call.data == 'yesp':
            try:
                 bot.send_message(call.message.chat.id, "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑/–ø –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ - "+str(int(sum(df[df['–ì–æ—Ä–æ–¥']==city]['–ó–∞—Ä–ø–ª–∞—Ç–∞'].to_list())/len(df[df['–ì–æ—Ä–æ–¥']==city]['–ó–∞—Ä–ø–ª–∞—Ç–∞'].to_list()))))
                 bot.send_message(call.message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç - "+str(len((df[df['–ì–æ—Ä–æ–¥']==city])[df['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'] <=int(exp)]))+'; –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª-–≤–∞ - '+str(len(df)))
                 bot.send_message(call.message.chat.id, "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑/–ø –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Ä–∞–≤–µ–Ω - "+str(int(sum(df[df['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã']<=int(exp)]['–ó–∞—Ä–ø–ª–∞—Ç–∞'].to_list())/len(df[df['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã']<=int(exp)]['–ó–∞—Ä–ø–ª–∞—Ç–∞'].to_list()))))
                 bot.send_message(call.message.chat.id, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑/–ø –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ —Ä–∞–≤–Ω–∞ - "+str(int(max(df[df['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã']<=int(exp)]['–ó–∞—Ä–ø–ª–∞—Ç–∞'].to_list()))))
                 bot.send_message(call.message.chat.id, "–í–æ—Ç —Ç–æ–ø 5 –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É"+str((((df[df['–ì–æ—Ä–æ–¥']==city])[df['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'] <=int(exp)])).sort_values(by=['–ó–∞—Ä–ø–ª–∞—Ç–∞'], ascending=False).drop(['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ hh.ru','Keywords','–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–π –Ω–∞ hh.ru ','ID','–ì–æ—Ä–æ–¥'],axis=1).head()))
                 #–ù–∞–≤—ã–∫–∏ 
                 bot.send_message(call.message.chat.id, "–í–æ—Ç –∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ä—è–≤–ª—è–µ—Ç —Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ: "+str((((((df[df['–ì–æ—Ä–æ–¥']==city])[df['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'] <=int(exp)])).sort_values(by=['–ó–∞—Ä–ø–ª–∞—Ç–∞'], ascending=False)['–ù–∞–≤—ã–∫–∏']).to_list())[0]))
                 bot.send_message(call.message.chat.id, '–ê –≤–æ—Ç —Å–∞–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –ø–æ –≤–∞–∫–∞–Ω–∏–∏: '+f(df))
            except Exception as e:  bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


@bot.message_handler(content_types=['text'])
def start(message):
        if message.text == '/reg':
            bot.send_message(message.from_user.id, "–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?");
            bot.register_next_step_handler(message, get_name); #—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_name
        else:
            bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ /reg');
def get_name(message): #–ø–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
        global name;
        name = message.text;
        bot.send_message(message.from_user.id, '–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?');
        bot.register_next_step_handler(message, get_surname);
def get_surname(message):
        global surname;
        surname = message.text;
        bot.send_message(message.from_user.id,'–ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Å—Ñ–µ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?');
        bot.register_next_step_handler(message, get_exp);
def get_exp(message):
        global exp;
        exp = message.text;
        bot.send_message(message.from_user.id,'–ù–∞ –∫–∞–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?');
        bot.register_next_step_handler(message, get_salary);
def get_salary(message):
        global salary;
        salary = message.text;
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        bn1 = types.KeyboardButton('–ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å')
        bn2 = types.KeyboardButton('–≥–∏–±—Ä–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        bn3 = types.KeyboardButton('—É–¥–∞–ª–µ–Ω–Ω–æ')
        markup.add(bn1, bn2, bn3)
        bot.send_message(message.from_user.id,'–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?', reply_markup=markup);
        bot.register_next_step_handler(message, get_typejob);
def get_typejob(message):
        global typejob;
        typejob= message.text;
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        bn1 = types.KeyboardButton('–ú–æ—Å–∫–≤–∞')
        bn2 = types.KeyboardButton('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
        bn3 = types.KeyboardButton('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥')
        markup.add(bn1, bn2, bn3)
        bot.send_message(message.from_user.id,'–í –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ?', reply_markup=markup);
        bot.register_next_step_handler(message, get_pop);

def get_pop(message):
        global city;
        city = message.text;
        bot.send_message(message.from_user.id,'–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?');
        bot.register_next_step_handler(message, get_age);


def get_age(message):
        global age;
        age = message.text;
        while age == 0: #–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
            try:
                 age = int(message.text) #–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            except Exception:
                 bot.send_message(message.from_user.id, '–¶–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞');
        keyboard = types.InlineKeyboardMarkup()
        key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
        key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
        keyboard.add(key_yes, key_no)
        #question = '–¢–µ–±–µ '+(age)+' –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç '+name+' '+surname+' '+'–¢–≤–æ–π –æ–ø—ã—Ç –≤ IT = '+exp+' –ñ–µ–ª–∞–µ–º–∞—è –∑/–ø - '+salary+'–¢—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –æ—Ç '+pop+'?';
        question = generate_resume(name, surname, age, exp, salary, typejob)
        bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)
def generate_resume(name, surname, age, exp, salary, employment_type):
    
    return f"""
üìã **–†–µ–∑—é–º–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Å—Ñ–µ—Ä–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏**

üë§ **–§–ò–û:** {name} {surname}  
üéÇ **–í–æ–∑—Ä–∞—Å—Ç:** {age} –ª–µ—Ç  
üíº **–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:** {exp}  
üí∞ **–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:** {salary}  
üìç **–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:** {employment_type}  

üîë **–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:**  
- –ê–Ω–∞–ª–∏–∑ –∏ –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö  
- –†–∞–±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏  
- –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã  
- –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ IT-–∞—É–¥–∏—Ç–æ–≤  

üìú **–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:**  
- [–ï—Å–ª–∏ –µ—Å—Ç—å, –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ]  

‚úç **–ü—Ä–æ—á–µ–µ:** –ì–æ—Ç–æ–≤ –∫ [–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞–º/—É–¥–∞–ª—ë–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ].


"""
# –ß–µ–º—É —É—á–∏—Ç—å—Å—è
def learn(message):
    if message.text == '–ß–µ–º—É —É—á–∏—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ –ò–ë?':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–û—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
        btn2 = types.KeyboardButton('–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã')
        btn3 = types.KeyboardButton('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–µ—Ç–µ, —á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∏—Ç—å—Å—è', reply_markup=markup);
        bot.register_next_step_handler(message, get_inf);
def get_inf(message): 
    if message.text=='–û—Å–Ω–æ–≤—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
        bot.send_message(message.from_user.id, '' + '[—Å—Å—ã–ª–∫–µ](https://habr.com/ru/articles/731702/)', parse_mode='Markdown')
        bot.send_message(message.from_user.id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /again')
    elif message.text=='–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã':
        bot.send_message(message.from_user.id, '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://habr.com/ru/articles/741686/)', parse_mode='Markdown')
        bot.send_message(message.from_user.id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /again')
    elif message.text=='–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('–°–µ—Ç–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏')
        btn2 = types.KeyboardButton('–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã')
        btn3 = types.KeyboardButton('–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è')
        btn4 = types.KeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–∫—Ä–∏–ø—Ç—ã')
        btn5 = types.KeyboardButton('–ó–∞—â–∏—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π')
        markup.add(btn1, btn2, btn3,btn4,btn5)
        bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–µ—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏', reply_markup=markup);
        bot.register_next_step_handler(message, tech);
def tech(message):
        if message.text=='–°–µ—Ç–µ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏':
            bot.send_message(message.from_user.id, '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://habr.com/ru/hubs/network_technologies/articles/)', parse_mode='Markdown')
            bot.send_message(message.from_user.id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /again')
        if message.text=='–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã':
            bot.send_message(message.from_user.id, '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://habr.com/ru/companies/otus/articles/728394/)', parse_mode='Markdown')
            bot.send_message(message.from_user.id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /again')
        if message.text=='–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è':
            bot.send_message(message.from_user.id, '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://habr.com/ru/hubs/crypto/articles/)', parse_mode='Markdown')
            bot.send_message(message.from_user.id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /again')
        if message.text=='–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–∫—Ä–∏–ø—Ç—ã':
            bot.send_message(message.from_user.id, '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://habr.com/ru/companies/ruvds/articles/325522/)', parse_mode='Markdown')
            bot.send_message(message.from_user.id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /again')
        if message.text=='–ó–∞—â–∏—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π':
            bot.send_message(message.from_user.id, '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–∞–π—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](https://habr.com/ru/companies/otus/articles/847490/)', parse_mode='Markdown')
            bot.send_message(message.from_user.id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /again')
# '–û—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã'
def chance(message):
    a = '–¢–≤–æ–π –æ–ø—ã—Ç –≤ IT - '+exp+', —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å - '+typejob+', –∞ —Ç–≤–æ–π –≥–æ—Ä–æ–¥ - '+city+'?'
    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yesp')
    key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='nop')
    keyboard.add(key_yes, key_no)
    bot.send_message(message.from_user.id, text=a, reply_markup=keyboard)
# –∫–≤–∏–∑
def start_quiz(message):
    questions = [
        {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å?", "answers": ["–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—É–≥—Ä–æ–∑—ã", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞", "–í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã"], "correct": 3},
        {"question": "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∏—à–∏–Ω–≥?", "answers": ["–¢–µ—Ö–Ω–∏–∫–∞ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö", "–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É", "–£—è–∑–≤–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è", "–°–ø–æ—Å–æ–± –≤–∑–ª–æ–º–∞ –ø–∞—Ä–æ–ª–µ–π"], "correct": 1},
        {"question": "–ö–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?", "answers": ["HTTP", "FTP", "HTTPS", "SMTP"], "correct": 2},
        {"question": "–ö–∞–∫–æ–π —Ç–∏–ø —É–≥—Ä–æ–∑—ã –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∏—Ä—É—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–∞–º–æ—Ä–∞–∑–º–Ω–æ–∂–∞—Ç—å—Å—è?", "answers": ["–ß–µ—Ä–≤—å", "–¢—Ä–æ—è–Ω", "–í–∏—Ä—É—Å", "–®–ø–∏–æ–Ω—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"], "correct": 0},
        {"question": "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏?", "answers": ["–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–ü–∞—Ä–æ–ª—å", "–í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã"], "correct": 3}
    ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    current_question = 0
    score = 0
    
    ask_question(user_id, current_question, questions, score)

def ask_question(user_id, current_question, questions, score):
    question = questions[current_question]
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i, answer in enumerate(question["answers"]):
        markup.add(types.KeyboardButton(answer))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    bot.send_message(user_id, question["question"], reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, handle_answer, current_question, questions, score)

def handle_answer(message, current_question, questions, score):
    user_answer = message.text
    correct_answer = questions[current_question]["answers"][questions[current_question]["correct"]]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if user_answer == correct_answer:
        score += 1
    
    current_question += 1
    
    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if current_question < len(questions):
        ask_question(message.from_user.id, current_question, questions, score)
    else:
        bot.send_message(message.from_user.id, f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(questions)}")
        bot.send_message(message.from_user.id, "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ /again", reply_markup=types.ReplyKeyboardRemove())

##

bot.polling(none_stop=True, interval=0) #–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å

